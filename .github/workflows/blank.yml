import random

# Класс корабля
class Ship:
    def __init__(self, position):
        self.position = position
        self.length = len(position)

# Класс доски
class Board:
    def __init__(self, size):
        self.size = size
        self.board = [['O' for x in range(size)] for y in range(size)]
        self.ships = []

    # Размещение кораблей на доске
    def place_ships(self, num_ships):
        for i in range(num_ships[0]):
            ship = Ship(random.sample(self.get_valid_positions(3), 1)[0])
            self.place_ship(ship)
            self.ships.append(ship)
        for i in range(num_ships[1]):
            ship = Ship(random.sample(self.get_valid_positions(2), 1)[0])
            self.place_ship(ship)
            self.ships.append(ship)
        for i in range(num_ships[2]):
            ship = Ship(random.sample(self.get_valid_positions(1), 1)[0])
            self.place_ship(ship)
            self.ships.append(ship)

    # Размещение корабля на доске
    def place_ship(self, ship):
        for pos in ship.position:
            self.board[pos[0]][pos[1]] = 'X'

    # Получение списка возможных позиций для размещения корабля
    def get_valid_positions(self, length):
        positions = []
        for x in range(self.size):
            for y in range(self.size):
                if self.is_valid_position(x, y, length):
                    positions.append(self.get_ship_position(x, y, length))
        return positions

    # Проверка, является ли позиция допустимой для размещения корабля
    def is_valid_position(self, x, y, length):
        for i in range(length):
            if not (x + i < self.size and self.board[x+i][y] == 'O' or
                    y + i < self.size and self.board[x][y+i] == 'O'):
                return False
        return True

    # Получение позиции корабля на основе начальной позиции и длины
    def get_ship_position(self, x, y, length):
        if random.randint(0, 1):
            return [(i, y) for i in range(x, x+length)]
        else:
            return [(x, i) for i in range(y, y+length)]

    # Вывод доски
    def print_board(self):
        for row in self.board:
            print(' '.join(row))

    # Получение символа в заданной клетке
    def get_cell(self, x, y):
        return self.board[x][y]

    # Установка символа в заданной клетке
    def set_cell(self, x, y, symbol):
        self.board[x][y] = symbol

# Класс игры
class Game:
    def __init__(self, board_size):
        self.board_size = board_size
        self.player_board = Board(board_size)
        self.computer_board = Board(board_size)
        self.player_turn = True

    # Запуск игры
    def start(self):
        print("Добро пожаловать в игру Морской бой")

        # Размещение кораблей на досках
        self.player_board.place_ships([1, 2, 1])
        self.computer_board.place_ships([1, 2, 1])

        # Основной цикл игры
        while True:
            # Определение текущей доски и вывод информации
            if self.player_turn:
                current_board = self.computer_board
                print("Ваша доска:")
            else:
                current_board = self.player_board
                print("Доска компьютера:")

            current_board.print_board()

            # Получение координат выстрела от игрока или компьютера
            if self.player_turn:
                x, y = self.get_player_shot()
            else:
                x, y = self.get_computer_shot()

            # Проверка попадания и обновление доски
            if current_board.get_cell(x, y) == 'X':
                print("Попадание!")
                current_board.set_cell(x, y, '*')
                if self.check_win(current_board):
                    self.end_game()
                    return
            else:
                print("Промах!")
                current_board.set_cell(x, y, '-')

            # Смена хода
            self.player_turn = not self.player_turn

    # Метод получения координат выстрела от игрока
    def get_player_shot(self):
        while True:
            try:
                x = int(input("Введите номер строки: "))
                y = int(input("Введите номер столбца: "))
                if x < 0 or x >= self.board_size or y < 0 or y >= self.board_size:
                    raise ValueError
                return x, y
            except ValueError:
                print("Некорректные координаты! Попробуйте еще раз.")

    # Метод получения координат выстрела от компьютера
    def get_computer_shot(self):
        x = random.randint(0, self.board_size - 1)
        y = random.randint(0, self.board_size - 1)
        return x, y

    # Проверка победы
    def check_win(self, board):
        for ship in board.ships:
            for pos in ship.position:
                if board.get_cell(pos[0], pos[1]) == 'X':
                    return False
        return True

    # Окончание игры
    def end_game(self):
        if self.player_turn:
            print("Вы выиграли!")
        else:
            print("Вы проиграли!")

game = Game(6)
game.start()
